def desplazar_caracteres(texto, x):
    texto_desplazado = ""
    
    for caracter in texto:
        if caracter.isalpha():  # Solo desplazamos letras
            # Verificamos si es mayúscula o minúscula
            base = ord('A') if caracter.isupper() else ord('a')
            # Calculamos el nuevo carácter desplazado dentro del rango alfabético
            nuevo_caracter = chr((ord(caracter) - base + x) % 26 + base)
            texto_desplazado += nuevo_caracter
        else:
            # Si no es letra, no lo desplazamos
            texto_desplazado += caracter
    
    return texto_desplazado

# Leemos el archivo de texto
def leer_archivo(ruta_archivo):
    with open(ruta_archivo, 'r', encoding='utf-8') as archivo:
        return archivo.read()

# Guardamos el texto desplazado en un nuevo archivo
def guardar_archivo(ruta_archivo, texto):
    with open(ruta_archivo, 'w', encoding='utf-8') as archivo:
        archivo.write(texto)

# Programa principal

# Obtenemos la ruta absoluta del directorio donde está el archivo .py
ruta_directorio = os.path.dirname(os.path.abspath(__file__))

# Creamos la ruta absoluta para "a.txt"
ruta_archivo = os.path.join(ruta_directorio, "a.txt")

# Generamos un número aleatorio entre 1 y 10 para X
x = random.randint(1, 10)
print(f"El número de desplazamientos aleatorio es: {x}")

# Leemos el archivo "a.txt"
texto = leer_archivo(ruta_archivo)

# Desplazamos el texto
texto_desplazado = desplazar_caracteres(texto, x)

# Guardamos el texto desplazado en un archivo con el nombre "Readm3 (X).txt" en el mismo directorio
nombre_archivo_salida = f"Readm3 ({x}).txt"
ruta_salida = os.path.join(ruta_directorio, nombre_archivo_salida)
guardar_archivo(ruta_salida, texto_desplazado)

print(f"El texto ha sido desplazado {x} posiciones y guardado en {ruta_salida}.")

Explicación de los cambios:

    Obtención de la ruta absoluta:
        Utilizamos os.path.abspath(__file__) para obtener la ruta absoluta del archivo .py.
        Luego usamos os.path.dirname() para obtener la carpeta donde está ubicado el script.
        Con os.path.join(), construimos la ruta completa hacia el archivo a.txt, asegurando que siempre esté en la misma carpeta que el script.

    Ruta del archivo de salida:
        El archivo de salida "Readm3 (X).txt" también se guarda en la misma carpeta que el script utilizando la misma técnica (os.path.join()).

Flujo del programa:

    El script buscará siempre el archivo a.txt en la misma carpeta donde esté el archivo .py.
    Desplazará los caracteres según un número aleatorio X entre 1 y 10.
    Guardará el archivo resultante con el nombre "Readm3 (X).txt" en la misma carpeta.

Con esto, el programa debería funcionar correctamente en cualquier entorno, siempre y cuando el archivo a.txt esté en la misma carpeta que el script. ¿Hay algo más que te gustaría ajustar?
Tú dijiste:
ahora quiero que me des un programa igual pero con el desplazamiento contrario, siempre ruta absoluta, este tiene que buscar "Readm3 ..." y tomar el valor de desplazamientos del nombre del archivo, que estara entre parentesis porque lo hicimos con el codigo anterior
ChatGPT Plus
ChatGPT

¡Entendido! Ahora te proporcionaré un programa que haga lo contrario del anterior. Este nuevo programa:

    Busca un archivo llamado "Readm3 (X).txt" en la misma carpeta que el script.
    Extrae el valor X entre paréntesis del nombre del archivo.
    Desplaza los caracteres del archivo en dirección contraria, es decir, reduce su valor ASCII en X posiciones.
    Guarda el archivo resultado en el mismo directorio, con un nuevo nombre para evitar sobrescribir el archivo original.

Código

python

import os
import re

def desplazar_caracteres_inverso(texto, x):
    texto_desplazado = ""
    
    for caracter in texto:
        if caracter.isalpha():  # Solo desplazamos letras
            # Verificamos si es mayúscula o minúscula
            base = ord('A') if caracter.isupper() else ord('a')
            # Calculamos el nuevo carácter desplazado inversamente dentro del rango alfabético
            nuevo_caracter = chr((ord(caracter) - base - x) % 26 + base)
            texto_desplazado += nuevo_caracter
        else:
            # Si no es letra, no lo desplazamos
            texto_desplazado += caracter
    
    return texto_desplazado

# Leemos el archivo de texto
def leer_archivo(ruta_archivo):
    with open(ruta_archivo, 'r', encoding='utf-8') as archivo:
        return archivo.read()

# Guardamos el texto desplazado en un nuevo archivo
def guardar_archivo(ruta_archivo, texto):
    with open(ruta_archivo, 'w', encoding='utf-8') as archivo:
        archivo.write(texto)

# Programa principal

# Obtenemos la ruta absoluta del directorio donde está el archivo .py
ruta_directorio = os.path.dirname(os.path.abspath(__file__))

# Buscamos archivos "Readm3 (X).txt"
patron_archivo = re.compile(r"Readm3 \((\d+)\)\.txt")

# Encontramos el archivo que coincide con el patrón
archivo_desplazado = None
for archivo in os.listdir(ruta_directorio):
    coincidencia = patron_archivo.match(archivo)
    if coincidencia:
        archivo_desplazado = archivo
        x = int(coincidencia.group(1))  # Extraemos el valor de X del nombre del archivo
        break

if archivo_desplazado:
    print(f"Archivo encontrado: {archivo_desplazado} con desplazamiento {x}.")

    # Leemos el archivo "Readm3 (X).txt"
    ruta_archivo = os.path.join(ruta_directorio, archivo_desplazado)
    texto = leer_archivo(ruta_archivo)

    # Desplazamos el texto inversamente
    texto_desplazado_inverso = desplazar_caracteres_inverso(texto, x)

    # Guardamos el texto desplazado en un nuevo archivo con el nombre "Restaurado.txt"
    ruta_salida = os.path.join(ruta_directorio, "Restaurado.txt")
    guardar_archivo(ruta_salida, texto_desplazado_inverso)

    print(f"El texto ha sido restaurado y guardado en {ruta_salida}.")
else:
    print("No se encontró un archivo 'Readm3 (X).txt' en la carpeta.")

Explicación de los cambios:

    Buscar archivo "Readm3 (X).txt"):
        Utilizamos la función os.listdir() para listar todos los archivos en el directorio del script.
        Aplicamos una expresión regular (re.compile) para encontrar el archivo cuyo nombre siga el patrón "Readm3 (X).txt", donde X es el número de desplazamientos que se usaron previamente.
        Si encuentra un archivo que coincide, extrae el valor de X y continúa con el proceso.

    Desplazamiento inverso:
        La función desplazar_caracteres_inverso() desplaza cada carácter en sentido inverso, es decir, reduce el valor ASCII en X posiciones.

    Guardar archivo restaurado:
        El archivo restaurado se guarda con el nombre "Restaurado.txt" para no sobrescribir el archivo original.

Flujo del programa:

    Busca un archivo que tenga el nombre en el formato "Readm3 (X).txt".
    Extrae el número de desplazamientos X del nombre.
    Desplaza cada carácter del archivo en dirección contraria, es decir, hacia atrás en el alfabeto.
    Guarda el resultado en un archivo llamado "Restaurado.txt".

Con esto, puedes revertir el desplazamiento de cualquier archivo creado con el código anterior. ¿Te gustaría ajustar algo más o hacer más pruebas?